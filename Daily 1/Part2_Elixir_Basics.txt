roshan@Roshans-MacBook-Air Daily 1 % IEX 
Erlang/OTP 26 [erts-14.2.5] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit] [dtrace]

Interactive Elixir (1.17.2) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> 2 + 3
5
iex(2)> 2 + 3 == 5
true
iex(3)> String.length("The quick brown fox jumps over the lazy dog")
43
iex(4)> 255
255
iex(5)> 0b0110
6
iex(6)> 0o644
420
iex(7)> 0x1F
31
iex(8)> 0x0024F
591
iex(9)> 3.14
3.14
iex(10)> .14
** (SyntaxError) invalid syntax found on iex:10:1:
    error: syntax error before: '.'
    │
 10 │ .14
    │ ^
    │
    └─ iex:10:1
    (iex 1.17.2) lib/iex/evaluator.ex:295: IEx.Evaluator.parse_eval_inspect/4
    (iex 1.17.2) lib/iex/evaluator.ex:187: IEx.Evaluator.loop/1
    (iex 1.17.2) lib/iex/evaluator.ex:32: IEx.Evaluator.init/5
    (stdlib 5.2.3) proc_lib.erl:241: :proc_lib.init_p_do_apply/3
iex(10)> 1.0e-10
1.0e-10
iex(11)> true
true
iex(12)> false
false
iex(13)> :foo
:foo
iex(14)> :foo == :bar #An atom is a constant whose name is its value
false
iex(15)> #The booleans true and false are also the atoms :true and :false, respectively
nil
iex(16)> is_atom(true)
true
iex(17)> is_boolean(:true)
true
iex(18)> :true === true
true
iex(19)> is_atom(MyApp.MyModule) #Names of modules in Elixir are also atoms.
true
iex(20)> :crypto.strong_rand_bytes 3
<<134, 11, 225>>
iex(21)> "hello"
"hello"
iex(22)> "dziękuję"
"dziękuję"
iex(23)> "foo
...(23)> bar"
"foo\nbar"
iex(24)> "foo\nbar"
"foo\nbar"
iex(25)> 2 + 2
4
iex(26)> 2 - 1
1
iex(27)> 2 * 5
10
iex(28)> 10 / 5 # / will always return a float
2.0
iex(29)> div(10, 5) #This one for the integer division
2
iex(30)> rem(10, 3) #mod
1
iex(31)> -20 || true
-20
iex(32)> false || 42
42
iex(33)> 42 && true
true
iex(34)> 42 && nil
nil
iex(35)> !42
false
iex(36)> !false
true
iex(37)> true and 42
42
iex(38)> false or true
true
iex(39)> not false
true
iex(40)> 42 and true
** (BadBooleanError) expected a boolean on left-side of "and", got: 42
    iex:40: (file)
iex(40)> not 42
** (ArgumentError) argument error
    :erlang.not(42)
    iex:40: (file)
iex(40)> 1 > 2
false
iex(41)> 1 != 2
true
iex(42)> 2 == 2
true
iex(43)> 2 <= 3
true
iex(44)> 2 === 2.0
false
iex(45)> 2 == 2.0
true
iex(46)> # number < atom < reference < function < port < pid < tuple < map < list < bitstring
nil
iex(47)> :hello > 999
true
iex(48)> {:hello, :world} > [1,2,3]
false
iex(49)> name = "Sean"
"Sean"
iex(50)> "Hello #{name}"
"Hello Sean"
iex(51)> "Hello " <> name #string concatenation with <> operator
"Hello Sean"
iex(52)> 
